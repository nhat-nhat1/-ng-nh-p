import React from 'react';
import { useLocation, useNavigate, Link } from 'react-router-dom';

export default function RegisterErrorPage() {
  const location = useLocation();
  const navigate = useNavigate();
  
  // Get error information from location state or URL params
  const errorType = location.state?.errorType || new URLSearchParams(location.search).get('error') || 'general';
  const errorMessage = location.state?.errorMessage || new URLSearchParams(location.search).get('message') || 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω';
  const formData = location.state?.formData || {};

  const getErrorDetails = (type) => {
    switch (type) {
      case 'email_exists':
        return {
          title: 'Email ƒë√£ t·ªìn t·∫°i',
          description: 'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n kh√°c. Vui l√≤ng s·ª≠ d·ª•ng email kh√°c ho·∫∑c ƒëƒÉng nh·∫≠p.',
          icon: 'üìß',
          suggestions: [
            'S·ª≠ d·ª•ng email kh√°c ƒë·ªÉ ƒëƒÉng k√Ω',
            'ƒêƒÉng nh·∫≠p n·∫øu b·∫°n ƒë√£ c√≥ t√†i kho·∫£n',
            'S·ª≠ d·ª•ng ch·ª©c nƒÉng qu√™n m·∫≠t kh·∫©u n·∫øu c·∫ßn'
          ]
        };
      case 'invalid_email':
        return {
          title: 'Email kh√¥ng h·ª£p l·ªá',
          description: 'ƒê·ªãa ch·ªâ email b·∫°n nh·∫≠p kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i.',
          icon: '‚úâÔ∏è',
          suggestions: [
            'Ki·ªÉm tra ƒë·ªãnh d·∫°ng email (v√≠ d·ª•: user@example.com)',
            'ƒê·∫£m b·∫£o kh√¥ng c√≥ kho·∫£ng tr·∫Øng th·ª´a',
            'Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát'
          ]
        };
      case 'weak_password':
        return {
          title: 'M·∫≠t kh·∫©u qu√° y·∫øu',
          description: 'M·∫≠t kh·∫©u c·ªßa b·∫°n kh√¥ng ƒë·ªß m·∫°nh. Vui l√≤ng t·∫°o m·∫≠t kh·∫©u m·∫°nh h∆°n.',
          icon: 'üîí',
          suggestions: [
            'S·ª≠ d·ª•ng √≠t nh·∫•t 8 k√Ω t·ª±',
            'Bao g·ªìm ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë',
            'Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ tƒÉng ƒë·ªô b·∫£o m·∫≠t'
          ]
        };
      case 'password_mismatch':
        return {
          title: 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp',
          description: 'M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng gi·ªëng nhau.',
          icon: 'üîë',
          suggestions: [
            'Ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u ƒë√£ nh·∫≠p',
            'ƒê·∫£m b·∫£o Caps Lock kh√¥ng ƒë∆∞·ª£c b·∫≠t',
            'Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªôt c√°ch c·∫©n th·∫≠n'
          ]
        };
      case 'missing_fields':
        return {
          title: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc',
          description: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc.',
          icon: 'üìù',
          suggestions: [
            'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß t√™n ng∆∞·ªùi d√πng',
            'Nh·∫≠p ƒë·ªãa ch·ªâ email h·ª£p l·ªá',
            'T·∫°o m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u'
          ]
        };
      case 'server_error':
        return {
          title: 'L·ªói m√°y ch·ªß',
          description: 'C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.',
          icon: '‚ö†Ô∏è',
          suggestions: [
            'Th·ª≠ ƒëƒÉng k√Ω l·∫°i sau v√†i ph√∫t',
            'Ki·ªÉm tra k·∫øt n·ªëi internet',
            'Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói v·∫´n ti·∫øp t·ª•c'
          ]
        };
      case 'username_taken':
        return {
          title: 'T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i',
          description: 'T√™n ng∆∞·ªùi d√πng n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng ch·ªçn t√™n kh√°c.',
          icon: 'üë§',
          suggestions: [
            'Ch·ªçn t√™n ng∆∞·ªùi d√πng kh√°c',
            'Th√™m s·ªë ho·∫∑c k√Ω t·ª± ƒë·∫∑c bi·ªát',
            'S·ª≠ d·ª•ng t√™n th·∫≠t ho·∫∑c nickname kh√°c'
          ]
        };
      default:
        return {
          title: 'L·ªói ƒëƒÉng k√Ω',
          description: errorMessage,
          icon: '‚ùå',
          suggestions: [
            'Ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p',
            'Th·ª≠ ƒëƒÉng k√Ω l·∫°i',
            'Li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt'
          ]
        };
    }
  };

  const errorDetails = getErrorDetails(errorType);

  const handleRetryRegister = () => {
    navigate('/register', { state: { formData } });
  };

  const handleGoToLogin = () => {
    navigate('/login', { state: { email: formData.email } });
  };

  const handleForgotPassword = () => {
    navigate('/forgot-password', { state: { email: formData.email } });
  };

  return (
    <div className="error-page">
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-md-8 col-lg-6">
            <div className="card error-card">
              <div className="card-body text-center p-5">
              <div className="mb-4">
                <div className="error-icon text-danger">{errorDetails.icon}</div>
                <h2 className="error-title">{errorDetails.title}</h2>
                <p className="error-description">{errorDetails.description}</p>
              </div>

              <div className="suggestions-list">
                <h5>G·ª£i √Ω kh·∫Øc ph·ª•c:</h5>
                <ul className="list-unstyled text-start">
                  {errorDetails.suggestions.map((suggestion, index) => (
                    <li key={index}>
                      <i className="fas fa-arrow-right me-2"></i>
                      {suggestion}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="action-buttons d-grid gap-2 d-md-flex justify-content-md-center">
                {errorType === 'email_exists' ? (
                  <>
                    <button 
                      className="btn btn-primary me-2" 
                      onClick={handleGoToLogin}
                    >
                      <i className="fas fa-sign-in-alt me-2"></i>
                      ƒêƒÉng nh·∫≠p
                    </button>
                    <button 
                      className="btn btn-outline-warning me-2" 
                      onClick={handleForgotPassword}
                    >
                      <i className="fas fa-key me-2"></i>
                      Qu√™n m·∫≠t kh·∫©u?
                    </button>
                    <button 
                      className="btn btn-outline-secondary" 
                      onClick={handleRetryRegister}
                    >
                      <i className="fas fa-user-plus me-2"></i>
                      Th·ª≠ ƒëƒÉng k√Ω l·∫°i
                    </button>
                  </>
                ) : (
                  <>
                    <button 
                      className="btn btn-primary me-2" 
                      onClick={handleRetryRegister}
                    >
                      <i className="fas fa-redo me-2"></i>
                      Th·ª≠ l·∫°i
                    </button>
                    <Link 
                      className="btn btn-outline-secondary" 
                      to="/register"
                    >
                      <i className="fas fa-arrow-left me-2"></i>
                      Quay l·∫°i ƒëƒÉng k√Ω
                    </Link>
                  </>
                )}
              </div>

              <div className="contact-info">
                <small>
                  N·∫øu b·∫°n v·∫´n g·∫∑p v·∫•n ƒë·ªÅ, vui l√≤ng{' '}
                  <Link to="/contact">
                    li√™n h·ªá h·ªó tr·ª£
                  </Link>
                  {' '}ho·∫∑c g·ª≠i email ƒë·∫øn{' '}
                  <a href="mailto:support@example.com">
                    support@example.com
                  </a>
                </small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}